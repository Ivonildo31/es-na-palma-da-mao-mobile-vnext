/**
 * 
 * // import { forkJoin } from 'rxjs/observable/forkJoin';
// import { map, filter } from 'rxjs/operators';
// import { Observable } from 'rxjs';

type MenuItem = {
  id: number;
  title: string;
  icon: string;
  component: string;
  isChecked: boolean;
  secure?: boolean;
  url?: string;
  name?: string;
  deepLink?: boolean;
  package?: string;
  uriScheme?: string;
};

const menus: MenuItem[] = [
  {
    id: 22,
    title: 'Notícias Destaques',
    icon: 'paper',
    component: 'NewsHighlightsPage',
    isChecked: false
  },
  {
    id: 23,
    title: 'Notícias',
    icon: 'paper',
    component: 'NewsListPage',
    isChecked: false
  },
  {
    id: 24,
    title: 'Agenda ES',
    icon: 'calendar',
    component: 'CalendarPage',
    isChecked: false
  },
  {
    id: 25,
    title: 'Consulta Processo',
    icon: 'search',
    component: 'SearchPage',
    isChecked: false
  },
  {
    id: 26,
    title: 'Situação CNH',
    icon: 'car',
    component: 'DriverLicensePage',
    secure: true,
    isChecked: false
  },
  {
    id: 27,
    title: 'Consulta Veículos',
    icon: 'car',
    component: 'VehiclesPage',
    secure: true,
    isChecked: false
  },

  {
    id: 28,
    title: 'Documentos para assinar',
    icon: 'create',
    component: 'DocumentsToSignPage',
    secure: true,
    isChecked: false
  },

  {
    id: 29,
    title: 'Consulta Ônibus',
    icon: 'bus',
    component: 'BusLinesPage',
    isChecked: false
  },
  {
    id: 30,
    title: 'Transcol Online',
    icon: 'bus',
    component: 'TranscolOnlinePage',
    isChecked: false
  },

  {
    id: 31,
    title: 'Portal da Transparência',
    icon: 'pie',
    component: 'TransparencyDashboardmatlabPage',
    isChecked: false
  },

  {
    id: 32,
    title: 'Consultas',
    icon: 'search',
    component: 'DioSearchPage',
    isChecked: false
  },
  {
    id: 33,
    title: 'Edições Recentes',
    icon: 'time',
    component: 'LatestEditionsPage',
    isChecked: false
  },

  {
    id: 34,
    title: 'Táxi Gov',
    icon: 'car',
    component: '',
    url: 'mb://action=login',
    name: 'app.mb',
    deepLink: true,
    package: 'mb.taxi.meiabandeirada',
    uriScheme: 'mb://',
    isChecked: false
  },

  {
    id: 35,
    title: 'Buscar concursos',
    icon: 'search',
    component: 'Apresentacao',
    isChecked: false
  },

  {
    id: 36,
    title: 'Sobre',
    icon: 'information-circle',
    component: 'AboutPage',
    isChecked: false
  }
];

@IonicPage()
@Component({
  selector: 'page-select-favorite',
  templateUrl: 'select-favorite.html'
})
export class SelectFavoritePage {
  isLoggedIn: boolean;

  public markAll: boolean;
  public menus: Array<MenuItem> = menus;
  public listaDeSelecionados: Array<MenuItem> = [];

  constructor(
    protected appCtrl: App,
    protected authQuery: AuthQuery,
    protected authNeeded: AuthNeededService,
    protected navCtrl: NavController
    // private api: DashboardApiService
  ) {}
  /**
   *
   *
   */
  // ionViewWillLoad() {
  //   this.loadMenuSelection();

  //     // salva favoritos no server todas as vezes que os favoritos forem atualizados após o carregamento
  //   // inicial da loja
  //   this.menuQuery.favorites$
  //     .pipe(filter(() => !this.menuStore.isPristine), flatMap(this.saveFavorites), takeUntil(this.destroyed$))
  //     .subscribe();
  // }

  // /**
  //  *
  //  *
  //  */
  // loadMenuSelection = (): void => {
  //   let menus$ = this.authQuery.isLoggedIn ? this.api.getFavoriteMenus().pipe(map(this.markFavorites)) : of(this.menus);

  //   menus$.subscribe(this.storeMenus);
  // };

  // /**
  //  *
  //  *
  //  */
  // toggleFavorite = (menu: MenuItem): MenuItem => {
  //     this.menuStore.update(menu.id, { isChecked: !menu.isChecked });
  //     return this.menuQuery.getEntity(menu.id);
  // };

  //  /**
  //  *
  //  *
  //  */
  // private saveFavorites = (favorites: MenuItem[]): Observable<FavoriteMenusData> => {
  //   return this.api.saveFavoriteMenus({
  //     favoriteMenus: favorites.map(line => line.id),
  //     date: new Date().toISOString()
  //   });
  // };


  // /**
  //  *
  //  *
  //  */
  // private markFavorites = (favorites: FavoriteMenusData): MenuItem[] => {
  //   return this.menus.map(menu => {
  //     return {
  //       ...menu,
  //       isChecked: favorites.favoriteMenus.some(f => f == menu.id)
  //     };
  //   });
  // };